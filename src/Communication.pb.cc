// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Communication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Communication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace hummingdroid {

void protobuf_ShutdownFile_Communication_2eproto() {
  delete Attitude::default_instance_;
  delete MotorsControl::default_instance_;
  delete PID::default_instance_;
  delete CommandPacket::default_instance_;
  delete CommandPacket_ControllerConfig::default_instance_;
  delete CommandPacket_TelemetryConfig::default_instance_;
  delete CommandPacket_SensorsConfig::default_instance_;
  delete CommandPacket_MotorsConfig::default_instance_;
  delete TelemetryPacket::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Communication_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Communication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Attitude::default_instance_ = new Attitude();
  MotorsControl::default_instance_ = new MotorsControl();
  PID::default_instance_ = new PID();
  CommandPacket::default_instance_ = new CommandPacket();
  CommandPacket_ControllerConfig::default_instance_ = new CommandPacket_ControllerConfig();
  CommandPacket_TelemetryConfig::default_instance_ = new CommandPacket_TelemetryConfig();
  CommandPacket_SensorsConfig::default_instance_ = new CommandPacket_SensorsConfig();
  CommandPacket_MotorsConfig::default_instance_ = new CommandPacket_MotorsConfig();
  TelemetryPacket::default_instance_ = new TelemetryPacket();
  Attitude::default_instance_->InitAsDefaultInstance();
  MotorsControl::default_instance_->InitAsDefaultInstance();
  PID::default_instance_->InitAsDefaultInstance();
  CommandPacket::default_instance_->InitAsDefaultInstance();
  CommandPacket_ControllerConfig::default_instance_->InitAsDefaultInstance();
  CommandPacket_TelemetryConfig::default_instance_->InitAsDefaultInstance();
  CommandPacket_SensorsConfig::default_instance_->InitAsDefaultInstance();
  CommandPacket_MotorsConfig::default_instance_->InitAsDefaultInstance();
  TelemetryPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Communication_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Communication_2eproto_once_);
void protobuf_AddDesc_Communication_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Communication_2eproto_once_,
                 &protobuf_AddDesc_Communication_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Communication_2eproto {
  StaticDescriptorInitializer_Communication_2eproto() {
    protobuf_AddDesc_Communication_2eproto();
  }
} static_descriptor_initializer_Communication_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Attitude::kAltitudeFieldNumber;
const int Attitude::kRollFieldNumber;
const int Attitude::kPitchFieldNumber;
const int Attitude::kYawRateFieldNumber;
const int Attitude::kTimestampFieldNumber;
#endif  // !_MSC_VER

Attitude::Attitude()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Attitude::InitAsDefaultInstance() {
}

Attitude::Attitude(const Attitude& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Attitude::SharedCtor() {
  _cached_size_ = 0;
  altitude_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_rate_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attitude::~Attitude() {
  SharedDtor();
}

void Attitude::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Attitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Attitude& Attitude::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

Attitude* Attitude::default_instance_ = NULL;

Attitude* Attitude::New() const {
  return new Attitude;
}

void Attitude::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altitude_ = 0;
    roll_ = 0;
    pitch_ = 0;
    yaw_rate_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Attitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float altitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_roll;
        break;
      }

      // required float roll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pitch;
        break;
      }

      // required float pitch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yaw_rate;
        break;
      }

      // required float yaw_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float altitude = 1;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->altitude(), output);
  }

  // required float roll = 2;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }

  // required float pitch = 3;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // required float yaw_rate = 4;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_rate(), output);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timestamp(), output);
  }

}

int Attitude::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float altitude = 1;
    if (has_altitude()) {
      total_size += 1 + 4;
    }

    // required float roll = 2;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float pitch = 3;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float yaw_rate = 4;
    if (has_yaw_rate()) {
      total_size += 1 + 4;
    }

    // optional double timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attitude::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Attitude*>(&from));
}

void Attitude::MergeFrom(const Attitude& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void Attitude::CopyFrom(const Attitude& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Attitude::Swap(Attitude* other) {
  if (other != this) {
    std::swap(altitude_, other->altitude_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_rate_, other->yaw_rate_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Attitude::GetTypeName() const {
  return "org.hummingdroid.Attitude";
}


// ===================================================================

#ifndef _MSC_VER
const int MotorsControl::kAltitudeThrottleFieldNumber;
const int MotorsControl::kRollThrottleFieldNumber;
const int MotorsControl::kPitchThrottleFieldNumber;
const int MotorsControl::kYawThrottleFieldNumber;
const int MotorsControl::kTimestampFieldNumber;
#endif  // !_MSC_VER

MotorsControl::MotorsControl()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MotorsControl::InitAsDefaultInstance() {
}

MotorsControl::MotorsControl(const MotorsControl& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MotorsControl::SharedCtor() {
  _cached_size_ = 0;
  altitude_throttle_ = 0;
  roll_throttle_ = 0;
  pitch_throttle_ = 0;
  yaw_throttle_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotorsControl::~MotorsControl() {
  SharedDtor();
}

void MotorsControl::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MotorsControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MotorsControl& MotorsControl::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

MotorsControl* MotorsControl::default_instance_ = NULL;

MotorsControl* MotorsControl::New() const {
  return new MotorsControl;
}

void MotorsControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altitude_throttle_ = 0;
    roll_throttle_ = 0;
    pitch_throttle_ = 0;
    yaw_throttle_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MotorsControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float altitude_throttle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_throttle_)));
          set_has_altitude_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_roll_throttle;
        break;
      }

      // required float roll_throttle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_throttle_)));
          set_has_roll_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pitch_throttle;
        break;
      }

      // required float pitch_throttle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_throttle_)));
          set_has_pitch_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yaw_throttle;
        break;
      }

      // required float yaw_throttle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_throttle_)));
          set_has_yaw_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotorsControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float altitude_throttle = 1;
  if (has_altitude_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->altitude_throttle(), output);
  }

  // required float roll_throttle = 2;
  if (has_roll_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll_throttle(), output);
  }

  // required float pitch_throttle = 3;
  if (has_pitch_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch_throttle(), output);
  }

  // required float yaw_throttle = 4;
  if (has_yaw_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_throttle(), output);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timestamp(), output);
  }

}

int MotorsControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float altitude_throttle = 1;
    if (has_altitude_throttle()) {
      total_size += 1 + 4;
    }

    // required float roll_throttle = 2;
    if (has_roll_throttle()) {
      total_size += 1 + 4;
    }

    // required float pitch_throttle = 3;
    if (has_pitch_throttle()) {
      total_size += 1 + 4;
    }

    // required float yaw_throttle = 4;
    if (has_yaw_throttle()) {
      total_size += 1 + 4;
    }

    // optional double timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotorsControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MotorsControl*>(&from));
}

void MotorsControl::MergeFrom(const MotorsControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altitude_throttle()) {
      set_altitude_throttle(from.altitude_throttle());
    }
    if (from.has_roll_throttle()) {
      set_roll_throttle(from.roll_throttle());
    }
    if (from.has_pitch_throttle()) {
      set_pitch_throttle(from.pitch_throttle());
    }
    if (from.has_yaw_throttle()) {
      set_yaw_throttle(from.yaw_throttle());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void MotorsControl::CopyFrom(const MotorsControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorsControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MotorsControl::Swap(MotorsControl* other) {
  if (other != this) {
    std::swap(altitude_throttle_, other->altitude_throttle_);
    std::swap(roll_throttle_, other->roll_throttle_);
    std::swap(pitch_throttle_, other->pitch_throttle_);
    std::swap(yaw_throttle_, other->yaw_throttle_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MotorsControl::GetTypeName() const {
  return "org.hummingdroid.MotorsControl";
}


// ===================================================================

#ifndef _MSC_VER
const int PID::kKpFieldNumber;
const int PID::kKiFieldNumber;
const int PID::kKdFieldNumber;
const int PID::kKoFieldNumber;
const int PID::kTdFieldNumber;
#endif  // !_MSC_VER

PID::PID()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PID::InitAsDefaultInstance() {
}

PID::PID(const PID& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PID::SharedCtor() {
  _cached_size_ = 0;
  kp_ = 0;
  ki_ = 0;
  kd_ = 0;
  ko_ = 0;
  td_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PID::~PID() {
  SharedDtor();
}

void PID::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PID& PID::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

PID* PID::default_instance_ = NULL;

PID* PID::New() const {
  return new PID;
}

void PID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kp_ = 0;
    ki_ = 0;
    kd_ = 0;
    ko_ = 0;
    td_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Kp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kp_)));
          set_has_kp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Ki;
        break;
      }

      // required float Ki = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Ki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ki_)));
          set_has_ki();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Kd;
        break;
      }

      // required float Kd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Kd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kd_)));
          set_has_kd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Ko;
        break;
      }

      // required float Ko = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Ko:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ko_)));
          set_has_ko();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Td;
        break;
      }

      // required float Td = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Td:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &td_)));
          set_has_td();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float Kp = 1;
  if (has_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->kp(), output);
  }

  // required float Ki = 2;
  if (has_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ki(), output);
  }

  // required float Kd = 3;
  if (has_kd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kd(), output);
  }

  // required float Ko = 4;
  if (has_ko()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ko(), output);
  }

  // required float Td = 5;
  if (has_td()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->td(), output);
  }

}

int PID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float Kp = 1;
    if (has_kp()) {
      total_size += 1 + 4;
    }

    // required float Ki = 2;
    if (has_ki()) {
      total_size += 1 + 4;
    }

    // required float Kd = 3;
    if (has_kd()) {
      total_size += 1 + 4;
    }

    // required float Ko = 4;
    if (has_ko()) {
      total_size += 1 + 4;
    }

    // required float Td = 5;
    if (has_td()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PID*>(&from));
}

void PID::MergeFrom(const PID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kp()) {
      set_kp(from.kp());
    }
    if (from.has_ki()) {
      set_ki(from.ki());
    }
    if (from.has_kd()) {
      set_kd(from.kd());
    }
    if (from.has_ko()) {
      set_ko(from.ko());
    }
    if (from.has_td()) {
      set_td(from.td());
    }
  }
}

void PID::CopyFrom(const PID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PID::Swap(PID* other) {
  if (other != this) {
    std::swap(kp_, other->kp_);
    std::swap(ki_, other->ki_);
    std::swap(kd_, other->kd_);
    std::swap(ko_, other->ko_);
    std::swap(td_, other->td_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PID::GetTypeName() const {
  return "org.hummingdroid.PID";
}


// ===================================================================

#ifndef _MSC_VER
const int CommandPacket_ControllerConfig::kAltitudePidFieldNumber;
const int CommandPacket_ControllerConfig::kRollPidFieldNumber;
const int CommandPacket_ControllerConfig::kPitchPidFieldNumber;
const int CommandPacket_ControllerConfig::kYawRatePidFieldNumber;
const int CommandPacket_ControllerConfig::kMaxInclinaisonFieldNumber;
const int CommandPacket_ControllerConfig::kMaxAltitudeFieldNumber;
const int CommandPacket_ControllerConfig::kMaxYawRateFieldNumber;
#endif  // !_MSC_VER

CommandPacket_ControllerConfig::CommandPacket_ControllerConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommandPacket_ControllerConfig::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  altitude_pid_ = const_cast< ::org::hummingdroid::PID*>(
      ::org::hummingdroid::PID::internal_default_instance());
#else
  altitude_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  roll_pid_ = const_cast< ::org::hummingdroid::PID*>(
      ::org::hummingdroid::PID::internal_default_instance());
#else
  roll_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pitch_pid_ = const_cast< ::org::hummingdroid::PID*>(
      ::org::hummingdroid::PID::internal_default_instance());
#else
  pitch_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  yaw_rate_pid_ = const_cast< ::org::hummingdroid::PID*>(
      ::org::hummingdroid::PID::internal_default_instance());
#else
  yaw_rate_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
#endif
}

CommandPacket_ControllerConfig::CommandPacket_ControllerConfig(const CommandPacket_ControllerConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_ControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  altitude_pid_ = NULL;
  roll_pid_ = NULL;
  pitch_pid_ = NULL;
  yaw_rate_pid_ = NULL;
  max_inclinaison_ = 0;
  max_altitude_ = 0;
  max_yaw_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_ControllerConfig::~CommandPacket_ControllerConfig() {
  SharedDtor();
}

void CommandPacket_ControllerConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete altitude_pid_;
    delete roll_pid_;
    delete pitch_pid_;
    delete yaw_rate_pid_;
  }
}

void CommandPacket_ControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommandPacket_ControllerConfig& CommandPacket_ControllerConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

CommandPacket_ControllerConfig* CommandPacket_ControllerConfig::default_instance_ = NULL;

CommandPacket_ControllerConfig* CommandPacket_ControllerConfig::New() const {
  return new CommandPacket_ControllerConfig;
}

void CommandPacket_ControllerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_altitude_pid()) {
      if (altitude_pid_ != NULL) altitude_pid_->::org::hummingdroid::PID::Clear();
    }
    if (has_roll_pid()) {
      if (roll_pid_ != NULL) roll_pid_->::org::hummingdroid::PID::Clear();
    }
    if (has_pitch_pid()) {
      if (pitch_pid_ != NULL) pitch_pid_->::org::hummingdroid::PID::Clear();
    }
    if (has_yaw_rate_pid()) {
      if (yaw_rate_pid_ != NULL) yaw_rate_pid_->::org::hummingdroid::PID::Clear();
    }
    max_inclinaison_ = 0;
    max_altitude_ = 0;
    max_yaw_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CommandPacket_ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.hummingdroid.PID altitude_pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_altitude_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roll_pid;
        break;
      }

      // required .org.hummingdroid.PID roll_pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roll_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roll_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pitch_pid;
        break;
      }

      // required .org.hummingdroid.PID pitch_pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pitch_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pitch_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yaw_rate_pid;
        break;
      }

      // required .org.hummingdroid.PID yaw_rate_pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yaw_rate_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yaw_rate_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_max_inclinaison;
        break;
      }

      // optional float max_inclinaison = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_inclinaison:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_inclinaison_)));
          set_has_max_inclinaison();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_max_altitude;
        break;
      }

      // optional float max_altitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_altitude_)));
          set_has_max_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_max_yaw_rate;
        break;
      }

      // optional float max_yaw_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_yaw_rate_)));
          set_has_max_yaw_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.hummingdroid.PID altitude_pid = 1;
  if (has_altitude_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->altitude_pid(), output);
  }

  // required .org.hummingdroid.PID roll_pid = 2;
  if (has_roll_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->roll_pid(), output);
  }

  // required .org.hummingdroid.PID pitch_pid = 3;
  if (has_pitch_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pitch_pid(), output);
  }

  // required .org.hummingdroid.PID yaw_rate_pid = 4;
  if (has_yaw_rate_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->yaw_rate_pid(), output);
  }

  // optional float max_inclinaison = 5;
  if (has_max_inclinaison()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_inclinaison(), output);
  }

  // optional float max_altitude = 6;
  if (has_max_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max_altitude(), output);
  }

  // optional float max_yaw_rate = 7;
  if (has_max_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_yaw_rate(), output);
  }

}

int CommandPacket_ControllerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.hummingdroid.PID altitude_pid = 1;
    if (has_altitude_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->altitude_pid());
    }

    // required .org.hummingdroid.PID roll_pid = 2;
    if (has_roll_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roll_pid());
    }

    // required .org.hummingdroid.PID pitch_pid = 3;
    if (has_pitch_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pitch_pid());
    }

    // required .org.hummingdroid.PID yaw_rate_pid = 4;
    if (has_yaw_rate_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yaw_rate_pid());
    }

    // optional float max_inclinaison = 5;
    if (has_max_inclinaison()) {
      total_size += 1 + 4;
    }

    // optional float max_altitude = 6;
    if (has_max_altitude()) {
      total_size += 1 + 4;
    }

    // optional float max_yaw_rate = 7;
    if (has_max_yaw_rate()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_ControllerConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommandPacket_ControllerConfig*>(&from));
}

void CommandPacket_ControllerConfig::MergeFrom(const CommandPacket_ControllerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altitude_pid()) {
      mutable_altitude_pid()->::org::hummingdroid::PID::MergeFrom(from.altitude_pid());
    }
    if (from.has_roll_pid()) {
      mutable_roll_pid()->::org::hummingdroid::PID::MergeFrom(from.roll_pid());
    }
    if (from.has_pitch_pid()) {
      mutable_pitch_pid()->::org::hummingdroid::PID::MergeFrom(from.pitch_pid());
    }
    if (from.has_yaw_rate_pid()) {
      mutable_yaw_rate_pid()->::org::hummingdroid::PID::MergeFrom(from.yaw_rate_pid());
    }
    if (from.has_max_inclinaison()) {
      set_max_inclinaison(from.max_inclinaison());
    }
    if (from.has_max_altitude()) {
      set_max_altitude(from.max_altitude());
    }
    if (from.has_max_yaw_rate()) {
      set_max_yaw_rate(from.max_yaw_rate());
    }
  }
}

void CommandPacket_ControllerConfig::CopyFrom(const CommandPacket_ControllerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_ControllerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_altitude_pid()) {
    if (!this->altitude_pid().IsInitialized()) return false;
  }
  if (has_roll_pid()) {
    if (!this->roll_pid().IsInitialized()) return false;
  }
  if (has_pitch_pid()) {
    if (!this->pitch_pid().IsInitialized()) return false;
  }
  if (has_yaw_rate_pid()) {
    if (!this->yaw_rate_pid().IsInitialized()) return false;
  }
  return true;
}

void CommandPacket_ControllerConfig::Swap(CommandPacket_ControllerConfig* other) {
  if (other != this) {
    std::swap(altitude_pid_, other->altitude_pid_);
    std::swap(roll_pid_, other->roll_pid_);
    std::swap(pitch_pid_, other->pitch_pid_);
    std::swap(yaw_rate_pid_, other->yaw_rate_pid_);
    std::swap(max_inclinaison_, other->max_inclinaison_);
    std::swap(max_altitude_, other->max_altitude_);
    std::swap(max_yaw_rate_, other->max_yaw_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommandPacket_ControllerConfig::GetTypeName() const {
  return "org.hummingdroid.CommandPacket.ControllerConfig";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket_TelemetryConfig::kHostFieldNumber;
const int CommandPacket_TelemetryConfig::kPortFieldNumber;
const int CommandPacket_TelemetryConfig::kCommandEnabledFieldNumber;
const int CommandPacket_TelemetryConfig::kAttitudeEnabledFieldNumber;
const int CommandPacket_TelemetryConfig::kControlEnabledFieldNumber;
#endif  // !_MSC_VER

CommandPacket_TelemetryConfig::CommandPacket_TelemetryConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommandPacket_TelemetryConfig::InitAsDefaultInstance() {
}

CommandPacket_TelemetryConfig::CommandPacket_TelemetryConfig(const CommandPacket_TelemetryConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_TelemetryConfig::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  commandenabled_ = false;
  attitudeenabled_ = false;
  controlenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_TelemetryConfig::~CommandPacket_TelemetryConfig() {
  SharedDtor();
}

void CommandPacket_TelemetryConfig::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommandPacket_TelemetryConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommandPacket_TelemetryConfig& CommandPacket_TelemetryConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

CommandPacket_TelemetryConfig* CommandPacket_TelemetryConfig::default_instance_ = NULL;

CommandPacket_TelemetryConfig* CommandPacket_TelemetryConfig::New() const {
  return new CommandPacket_TelemetryConfig;
}

void CommandPacket_TelemetryConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
    commandenabled_ = false;
    attitudeenabled_ = false;
    controlenabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CommandPacket_TelemetryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commandEnabled;
        break;
      }

      // required bool commandEnabled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commandEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &commandenabled_)));
          set_has_commandenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attitudeEnabled;
        break;
      }

      // required bool attitudeEnabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attitudeEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attitudeenabled_)));
          set_has_attitudeenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_controlEnabled;
        break;
      }

      // required bool controlEnabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &controlenabled_)));
          set_has_controlenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_TelemetryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required bool commandEnabled = 3;
  if (has_commandenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->commandenabled(), output);
  }

  // required bool attitudeEnabled = 4;
  if (has_attitudeenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->attitudeenabled(), output);
  }

  // required bool controlEnabled = 5;
  if (has_controlenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->controlenabled(), output);
  }

}

int CommandPacket_TelemetryConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required bool commandEnabled = 3;
    if (has_commandenabled()) {
      total_size += 1 + 1;
    }

    // required bool attitudeEnabled = 4;
    if (has_attitudeenabled()) {
      total_size += 1 + 1;
    }

    // required bool controlEnabled = 5;
    if (has_controlenabled()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_TelemetryConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommandPacket_TelemetryConfig*>(&from));
}

void CommandPacket_TelemetryConfig::MergeFrom(const CommandPacket_TelemetryConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_commandenabled()) {
      set_commandenabled(from.commandenabled());
    }
    if (from.has_attitudeenabled()) {
      set_attitudeenabled(from.attitudeenabled());
    }
    if (from.has_controlenabled()) {
      set_controlenabled(from.controlenabled());
    }
  }
}

void CommandPacket_TelemetryConfig::CopyFrom(const CommandPacket_TelemetryConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_TelemetryConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CommandPacket_TelemetryConfig::Swap(CommandPacket_TelemetryConfig* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(commandenabled_, other->commandenabled_);
    std::swap(attitudeenabled_, other->attitudeenabled_);
    std::swap(controlenabled_, other->controlenabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommandPacket_TelemetryConfig::GetTypeName() const {
  return "org.hummingdroid.CommandPacket.TelemetryConfig";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket_SensorsConfig::kAccelLowpassConstantFieldNumber;
const int CommandPacket_SensorsConfig::kGyroRollBiasFieldNumber;
const int CommandPacket_SensorsConfig::kGyroPitchBiasFieldNumber;
const int CommandPacket_SensorsConfig::kGyroYawBiasFieldNumber;
const int CommandPacket_SensorsConfig::kAccelRollBiasFieldNumber;
const int CommandPacket_SensorsConfig::kAccelPitchBiasFieldNumber;
#endif  // !_MSC_VER

CommandPacket_SensorsConfig::CommandPacket_SensorsConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommandPacket_SensorsConfig::InitAsDefaultInstance() {
}

CommandPacket_SensorsConfig::CommandPacket_SensorsConfig(const CommandPacket_SensorsConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_SensorsConfig::SharedCtor() {
  _cached_size_ = 0;
  accel_lowpass_constant_ = 0;
  gyro_roll_bias_ = 0;
  gyro_pitch_bias_ = 0;
  gyro_yaw_bias_ = 0;
  accel_roll_bias_ = 0;
  accel_pitch_bias_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_SensorsConfig::~CommandPacket_SensorsConfig() {
  SharedDtor();
}

void CommandPacket_SensorsConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommandPacket_SensorsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommandPacket_SensorsConfig& CommandPacket_SensorsConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

CommandPacket_SensorsConfig* CommandPacket_SensorsConfig::default_instance_ = NULL;

CommandPacket_SensorsConfig* CommandPacket_SensorsConfig::New() const {
  return new CommandPacket_SensorsConfig;
}

void CommandPacket_SensorsConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accel_lowpass_constant_ = 0;
    gyro_roll_bias_ = 0;
    gyro_pitch_bias_ = 0;
    gyro_yaw_bias_ = 0;
    accel_roll_bias_ = 0;
    accel_pitch_bias_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CommandPacket_SensorsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float accel_lowpass_constant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_lowpass_constant_)));
          set_has_accel_lowpass_constant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_gyro_roll_bias;
        break;
      }

      // required float gyro_roll_bias = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_roll_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_roll_bias_)));
          set_has_gyro_roll_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_gyro_pitch_bias;
        break;
      }

      // required float gyro_pitch_bias = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_pitch_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_pitch_bias_)));
          set_has_gyro_pitch_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_gyro_yaw_bias;
        break;
      }

      // required float gyro_yaw_bias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_yaw_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_yaw_bias_)));
          set_has_gyro_yaw_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_accel_roll_bias;
        break;
      }

      // required float accel_roll_bias = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accel_roll_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_roll_bias_)));
          set_has_accel_roll_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_accel_pitch_bias;
        break;
      }

      // required float accel_pitch_bias = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accel_pitch_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_pitch_bias_)));
          set_has_accel_pitch_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_SensorsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float accel_lowpass_constant = 1;
  if (has_accel_lowpass_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->accel_lowpass_constant(), output);
  }

  // required float gyro_roll_bias = 2;
  if (has_gyro_roll_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gyro_roll_bias(), output);
  }

  // required float gyro_pitch_bias = 3;
  if (has_gyro_pitch_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gyro_pitch_bias(), output);
  }

  // required float gyro_yaw_bias = 4;
  if (has_gyro_yaw_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gyro_yaw_bias(), output);
  }

  // required float accel_roll_bias = 5;
  if (has_accel_roll_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->accel_roll_bias(), output);
  }

  // required float accel_pitch_bias = 6;
  if (has_accel_pitch_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->accel_pitch_bias(), output);
  }

}

int CommandPacket_SensorsConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float accel_lowpass_constant = 1;
    if (has_accel_lowpass_constant()) {
      total_size += 1 + 4;
    }

    // required float gyro_roll_bias = 2;
    if (has_gyro_roll_bias()) {
      total_size += 1 + 4;
    }

    // required float gyro_pitch_bias = 3;
    if (has_gyro_pitch_bias()) {
      total_size += 1 + 4;
    }

    // required float gyro_yaw_bias = 4;
    if (has_gyro_yaw_bias()) {
      total_size += 1 + 4;
    }

    // required float accel_roll_bias = 5;
    if (has_accel_roll_bias()) {
      total_size += 1 + 4;
    }

    // required float accel_pitch_bias = 6;
    if (has_accel_pitch_bias()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_SensorsConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommandPacket_SensorsConfig*>(&from));
}

void CommandPacket_SensorsConfig::MergeFrom(const CommandPacket_SensorsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accel_lowpass_constant()) {
      set_accel_lowpass_constant(from.accel_lowpass_constant());
    }
    if (from.has_gyro_roll_bias()) {
      set_gyro_roll_bias(from.gyro_roll_bias());
    }
    if (from.has_gyro_pitch_bias()) {
      set_gyro_pitch_bias(from.gyro_pitch_bias());
    }
    if (from.has_gyro_yaw_bias()) {
      set_gyro_yaw_bias(from.gyro_yaw_bias());
    }
    if (from.has_accel_roll_bias()) {
      set_accel_roll_bias(from.accel_roll_bias());
    }
    if (from.has_accel_pitch_bias()) {
      set_accel_pitch_bias(from.accel_pitch_bias());
    }
  }
}

void CommandPacket_SensorsConfig::CopyFrom(const CommandPacket_SensorsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_SensorsConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CommandPacket_SensorsConfig::Swap(CommandPacket_SensorsConfig* other) {
  if (other != this) {
    std::swap(accel_lowpass_constant_, other->accel_lowpass_constant_);
    std::swap(gyro_roll_bias_, other->gyro_roll_bias_);
    std::swap(gyro_pitch_bias_, other->gyro_pitch_bias_);
    std::swap(gyro_yaw_bias_, other->gyro_yaw_bias_);
    std::swap(accel_roll_bias_, other->accel_roll_bias_);
    std::swap(accel_pitch_bias_, other->accel_pitch_bias_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommandPacket_SensorsConfig::GetTypeName() const {
  return "org.hummingdroid.CommandPacket.SensorsConfig";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket_MotorsConfig::kMinPwmFieldNumber;
const int CommandPacket_MotorsConfig::kMaxPwmFieldNumber;
#endif  // !_MSC_VER

CommandPacket_MotorsConfig::CommandPacket_MotorsConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommandPacket_MotorsConfig::InitAsDefaultInstance() {
}

CommandPacket_MotorsConfig::CommandPacket_MotorsConfig(const CommandPacket_MotorsConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_MotorsConfig::SharedCtor() {
  _cached_size_ = 0;
  min_pwm_ = 0;
  max_pwm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_MotorsConfig::~CommandPacket_MotorsConfig() {
  SharedDtor();
}

void CommandPacket_MotorsConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CommandPacket_MotorsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommandPacket_MotorsConfig& CommandPacket_MotorsConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

CommandPacket_MotorsConfig* CommandPacket_MotorsConfig::default_instance_ = NULL;

CommandPacket_MotorsConfig* CommandPacket_MotorsConfig::New() const {
  return new CommandPacket_MotorsConfig;
}

void CommandPacket_MotorsConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_pwm_ = 0;
    max_pwm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CommandPacket_MotorsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_pwm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_pwm_)));
          set_has_min_pwm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_pwm;
        break;
      }

      // required int32 max_pwm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_pwm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pwm_)));
          set_has_max_pwm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_MotorsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 min_pwm = 1;
  if (has_min_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_pwm(), output);
  }

  // required int32 max_pwm = 2;
  if (has_max_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_pwm(), output);
  }

}

int CommandPacket_MotorsConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_pwm = 1;
    if (has_min_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_pwm());
    }

    // required int32 max_pwm = 2;
    if (has_max_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pwm());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_MotorsConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommandPacket_MotorsConfig*>(&from));
}

void CommandPacket_MotorsConfig::MergeFrom(const CommandPacket_MotorsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_pwm()) {
      set_min_pwm(from.min_pwm());
    }
    if (from.has_max_pwm()) {
      set_max_pwm(from.max_pwm());
    }
  }
}

void CommandPacket_MotorsConfig::CopyFrom(const CommandPacket_MotorsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_MotorsConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommandPacket_MotorsConfig::Swap(CommandPacket_MotorsConfig* other) {
  if (other != this) {
    std::swap(min_pwm_, other->min_pwm_);
    std::swap(max_pwm_, other->max_pwm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommandPacket_MotorsConfig::GetTypeName() const {
  return "org.hummingdroid.CommandPacket.MotorsConfig";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket::kCommandFieldNumber;
const int CommandPacket::kControllerConfigFieldNumber;
const int CommandPacket::kTelemetryConfigFieldNumber;
const int CommandPacket::kSensorsConfigFieldNumber;
const int CommandPacket::kMotorsConfigFieldNumber;
#endif  // !_MSC_VER

CommandPacket::CommandPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CommandPacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  command_ = const_cast< ::org::hummingdroid::Attitude*>(
      ::org::hummingdroid::Attitude::internal_default_instance());
#else
  command_ = const_cast< ::org::hummingdroid::Attitude*>(&::org::hummingdroid::Attitude::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  controller_config_ = const_cast< ::org::hummingdroid::CommandPacket_ControllerConfig*>(
      ::org::hummingdroid::CommandPacket_ControllerConfig::internal_default_instance());
#else
  controller_config_ = const_cast< ::org::hummingdroid::CommandPacket_ControllerConfig*>(&::org::hummingdroid::CommandPacket_ControllerConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  telemetry_config_ = const_cast< ::org::hummingdroid::CommandPacket_TelemetryConfig*>(
      ::org::hummingdroid::CommandPacket_TelemetryConfig::internal_default_instance());
#else
  telemetry_config_ = const_cast< ::org::hummingdroid::CommandPacket_TelemetryConfig*>(&::org::hummingdroid::CommandPacket_TelemetryConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sensors_config_ = const_cast< ::org::hummingdroid::CommandPacket_SensorsConfig*>(
      ::org::hummingdroid::CommandPacket_SensorsConfig::internal_default_instance());
#else
  sensors_config_ = const_cast< ::org::hummingdroid::CommandPacket_SensorsConfig*>(&::org::hummingdroid::CommandPacket_SensorsConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  motors_config_ = const_cast< ::org::hummingdroid::CommandPacket_MotorsConfig*>(
      ::org::hummingdroid::CommandPacket_MotorsConfig::internal_default_instance());
#else
  motors_config_ = const_cast< ::org::hummingdroid::CommandPacket_MotorsConfig*>(&::org::hummingdroid::CommandPacket_MotorsConfig::default_instance());
#endif
}

CommandPacket::CommandPacket(const CommandPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  controller_config_ = NULL;
  telemetry_config_ = NULL;
  sensors_config_ = NULL;
  motors_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket::~CommandPacket() {
  SharedDtor();
}

void CommandPacket::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete command_;
    delete controller_config_;
    delete telemetry_config_;
    delete sensors_config_;
    delete motors_config_;
  }
}

void CommandPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CommandPacket& CommandPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

CommandPacket* CommandPacket::default_instance_ = NULL;

CommandPacket* CommandPacket::New() const {
  return new CommandPacket;
}

void CommandPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != NULL) command_->::org::hummingdroid::Attitude::Clear();
    }
    if (has_controller_config()) {
      if (controller_config_ != NULL) controller_config_->::org::hummingdroid::CommandPacket_ControllerConfig::Clear();
    }
    if (has_telemetry_config()) {
      if (telemetry_config_ != NULL) telemetry_config_->::org::hummingdroid::CommandPacket_TelemetryConfig::Clear();
    }
    if (has_sensors_config()) {
      if (sensors_config_ != NULL) sensors_config_->::org::hummingdroid::CommandPacket_SensorsConfig::Clear();
    }
    if (has_motors_config()) {
      if (motors_config_ != NULL) motors_config_->::org::hummingdroid::CommandPacket_MotorsConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CommandPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.hummingdroid.Attitude command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_controller_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.ControllerConfig controller_config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_controller_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_telemetry_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.TelemetryConfig telemetry_config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telemetry_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telemetry_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sensors_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.SensorsConfig sensors_config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensors_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensors_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motors_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.MotorsConfig motors_config = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motors_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motors_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .org.hummingdroid.Attitude command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->command(), output);
  }

  // optional .org.hummingdroid.CommandPacket.ControllerConfig controller_config = 2;
  if (has_controller_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->controller_config(), output);
  }

  // optional .org.hummingdroid.CommandPacket.TelemetryConfig telemetry_config = 3;
  if (has_telemetry_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->telemetry_config(), output);
  }

  // optional .org.hummingdroid.CommandPacket.SensorsConfig sensors_config = 4;
  if (has_sensors_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->sensors_config(), output);
  }

  // optional .org.hummingdroid.CommandPacket.MotorsConfig motors_config = 5;
  if (has_motors_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->motors_config(), output);
  }

}

int CommandPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .org.hummingdroid.Attitude command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .org.hummingdroid.CommandPacket.ControllerConfig controller_config = 2;
    if (has_controller_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller_config());
    }

    // optional .org.hummingdroid.CommandPacket.TelemetryConfig telemetry_config = 3;
    if (has_telemetry_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->telemetry_config());
    }

    // optional .org.hummingdroid.CommandPacket.SensorsConfig sensors_config = 4;
    if (has_sensors_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors_config());
    }

    // optional .org.hummingdroid.CommandPacket.MotorsConfig motors_config = 5;
    if (has_motors_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motors_config());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CommandPacket*>(&from));
}

void CommandPacket::MergeFrom(const CommandPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::org::hummingdroid::Attitude::MergeFrom(from.command());
    }
    if (from.has_controller_config()) {
      mutable_controller_config()->::org::hummingdroid::CommandPacket_ControllerConfig::MergeFrom(from.controller_config());
    }
    if (from.has_telemetry_config()) {
      mutable_telemetry_config()->::org::hummingdroid::CommandPacket_TelemetryConfig::MergeFrom(from.telemetry_config());
    }
    if (from.has_sensors_config()) {
      mutable_sensors_config()->::org::hummingdroid::CommandPacket_SensorsConfig::MergeFrom(from.sensors_config());
    }
    if (from.has_motors_config()) {
      mutable_motors_config()->::org::hummingdroid::CommandPacket_MotorsConfig::MergeFrom(from.motors_config());
    }
  }
}

void CommandPacket::CopyFrom(const CommandPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket::IsInitialized() const {

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_controller_config()) {
    if (!this->controller_config().IsInitialized()) return false;
  }
  if (has_telemetry_config()) {
    if (!this->telemetry_config().IsInitialized()) return false;
  }
  if (has_sensors_config()) {
    if (!this->sensors_config().IsInitialized()) return false;
  }
  if (has_motors_config()) {
    if (!this->motors_config().IsInitialized()) return false;
  }
  return true;
}

void CommandPacket::Swap(CommandPacket* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(controller_config_, other->controller_config_);
    std::swap(telemetry_config_, other->telemetry_config_);
    std::swap(sensors_config_, other->sensors_config_);
    std::swap(motors_config_, other->motors_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CommandPacket::GetTypeName() const {
  return "org.hummingdroid.CommandPacket";
}


// ===================================================================

#ifndef _MSC_VER
const int TelemetryPacket::kCommandFieldNumber;
const int TelemetryPacket::kAttitudeFieldNumber;
const int TelemetryPacket::kControlFieldNumber;
#endif  // !_MSC_VER

TelemetryPacket::TelemetryPacket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TelemetryPacket::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  command_ = const_cast< ::org::hummingdroid::Attitude*>(
      ::org::hummingdroid::Attitude::internal_default_instance());
#else
  command_ = const_cast< ::org::hummingdroid::Attitude*>(&::org::hummingdroid::Attitude::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attitude_ = const_cast< ::org::hummingdroid::Attitude*>(
      ::org::hummingdroid::Attitude::internal_default_instance());
#else
  attitude_ = const_cast< ::org::hummingdroid::Attitude*>(&::org::hummingdroid::Attitude::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  control_ = const_cast< ::org::hummingdroid::MotorsControl*>(
      ::org::hummingdroid::MotorsControl::internal_default_instance());
#else
  control_ = const_cast< ::org::hummingdroid::MotorsControl*>(&::org::hummingdroid::MotorsControl::default_instance());
#endif
}

TelemetryPacket::TelemetryPacket(const TelemetryPacket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TelemetryPacket::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  attitude_ = NULL;
  control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelemetryPacket::~TelemetryPacket() {
  SharedDtor();
}

void TelemetryPacket::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete command_;
    delete attitude_;
    delete control_;
  }
}

void TelemetryPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TelemetryPacket& TelemetryPacket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Communication_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
#endif
  return *default_instance_;
}

TelemetryPacket* TelemetryPacket::default_instance_ = NULL;

TelemetryPacket* TelemetryPacket::New() const {
  return new TelemetryPacket;
}

void TelemetryPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != NULL) command_->::org::hummingdroid::Attitude::Clear();
    }
    if (has_attitude()) {
      if (attitude_ != NULL) attitude_->::org::hummingdroid::Attitude::Clear();
    }
    if (has_control()) {
      if (control_ != NULL) control_->::org::hummingdroid::MotorsControl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TelemetryPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.hummingdroid.Attitude command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attitude;
        break;
      }

      // optional .org.hummingdroid.Attitude attitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attitude()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_control;
        break;
      }

      // optional .org.hummingdroid.MotorsControl control = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TelemetryPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .org.hummingdroid.Attitude command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->command(), output);
  }

  // optional .org.hummingdroid.Attitude attitude = 2;
  if (has_attitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->attitude(), output);
  }

  // optional .org.hummingdroid.MotorsControl control = 3;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->control(), output);
  }

}

int TelemetryPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .org.hummingdroid.Attitude command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .org.hummingdroid.Attitude attitude = 2;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attitude());
    }

    // optional .org.hummingdroid.MotorsControl control = 3;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TelemetryPacket*>(&from));
}

void TelemetryPacket::MergeFrom(const TelemetryPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::org::hummingdroid::Attitude::MergeFrom(from.command());
    }
    if (from.has_attitude()) {
      mutable_attitude()->::org::hummingdroid::Attitude::MergeFrom(from.attitude());
    }
    if (from.has_control()) {
      mutable_control()->::org::hummingdroid::MotorsControl::MergeFrom(from.control());
    }
  }
}

void TelemetryPacket::CopyFrom(const TelemetryPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryPacket::IsInitialized() const {

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_attitude()) {
    if (!this->attitude().IsInitialized()) return false;
  }
  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  return true;
}

void TelemetryPacket::Swap(TelemetryPacket* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(attitude_, other->attitude_);
    std::swap(control_, other->control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TelemetryPacket::GetTypeName() const {
  return "org.hummingdroid.TelemetryPacket";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hummingdroid
}  // namespace org

// @@protoc_insertion_point(global_scope)

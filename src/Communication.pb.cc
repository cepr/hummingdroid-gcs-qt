// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Communication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Communication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace hummingdroid {

namespace {

const ::google::protobuf::Descriptor* Attitude_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attitude_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotorsControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotorsControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* PID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Switches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Switches_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPacket_ControllerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPacket_ControllerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPacket_TelemetryConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPacket_TelemetryConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPacket_SensorsConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPacket_SensorsConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPacket_MotorsConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPacket_MotorsConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelemetryPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelemetryPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Communication_2eproto() {
  protobuf_AddDesc_Communication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Communication.proto");
  GOOGLE_CHECK(file != NULL);
  Attitude_descriptor_ = file->message_type(0);
  static const int Attitude_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, roll_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, pitch_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, yaw_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, timestamp_),
  };
  Attitude_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attitude_descriptor_,
      Attitude::default_instance_,
      Attitude_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attitude, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attitude));
  MotorsControl_descriptor_ = file->message_type(1);
  static const int MotorsControl_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsControl, altitude_throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsControl, roll_throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsControl, pitch_throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsControl, yaw_throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsControl, timestamp_),
  };
  MotorsControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotorsControl_descriptor_,
      MotorsControl::default_instance_,
      MotorsControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotorsControl));
  PID_descriptor_ = file->message_type(2);
  static const int PID_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, kd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, ko_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, td_),
  };
  PID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PID_descriptor_,
      PID::default_instance_,
      PID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PID));
  Switches_descriptor_ = file->message_type(3);
  static const int Switches_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switches, front_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switches, front_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switches, back_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switches, back_left_),
  };
  Switches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Switches_descriptor_,
      Switches::default_instance_,
      Switches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Switches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Switches));
  CommandPacket_descriptor_ = file->message_type(4);
  static const int CommandPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket, controller_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket, telemetry_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket, sensors_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket, motors_config_),
  };
  CommandPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPacket_descriptor_,
      CommandPacket::default_instance_,
      CommandPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPacket));
  CommandPacket_ControllerConfig_descriptor_ = CommandPacket_descriptor_->nested_type(0);
  static const int CommandPacket_ControllerConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, altitude_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, roll_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, pitch_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, yaw_rate_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, max_inclinaison_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, max_altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, max_yaw_rate_),
  };
  CommandPacket_ControllerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPacket_ControllerConfig_descriptor_,
      CommandPacket_ControllerConfig::default_instance_,
      CommandPacket_ControllerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_ControllerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPacket_ControllerConfig));
  CommandPacket_TelemetryConfig_descriptor_ = CommandPacket_descriptor_->nested_type(1);
  static const int CommandPacket_TelemetryConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, commandenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, attitudeenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, controlenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, switchesenabled_),
  };
  CommandPacket_TelemetryConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPacket_TelemetryConfig_descriptor_,
      CommandPacket_TelemetryConfig::default_instance_,
      CommandPacket_TelemetryConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_TelemetryConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPacket_TelemetryConfig));
  CommandPacket_SensorsConfig_descriptor_ = CommandPacket_descriptor_->nested_type(2);
  static const int CommandPacket_SensorsConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, accel_lowpass_constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, gyro_roll_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, gyro_pitch_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, gyro_yaw_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, gyro_roll_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, gyro_pitch_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, gyro_yaw_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, accel_roll_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, accel_pitch_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, apply_modulo_),
  };
  CommandPacket_SensorsConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPacket_SensorsConfig_descriptor_,
      CommandPacket_SensorsConfig::default_instance_,
      CommandPacket_SensorsConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_SensorsConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPacket_SensorsConfig));
  CommandPacket_MotorsConfig_descriptor_ = CommandPacket_descriptor_->nested_type(3);
  static const int CommandPacket_MotorsConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_MotorsConfig, min_pwm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_MotorsConfig, max_pwm_),
  };
  CommandPacket_MotorsConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPacket_MotorsConfig_descriptor_,
      CommandPacket_MotorsConfig::default_instance_,
      CommandPacket_MotorsConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_MotorsConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPacket_MotorsConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPacket_MotorsConfig));
  TelemetryPacket_descriptor_ = file->message_type(5);
  static const int TelemetryPacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, attitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, switches_),
  };
  TelemetryPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TelemetryPacket_descriptor_,
      TelemetryPacket::default_instance_,
      TelemetryPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TelemetryPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Communication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attitude_descriptor_, &Attitude::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotorsControl_descriptor_, &MotorsControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PID_descriptor_, &PID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Switches_descriptor_, &Switches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPacket_descriptor_, &CommandPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPacket_ControllerConfig_descriptor_, &CommandPacket_ControllerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPacket_TelemetryConfig_descriptor_, &CommandPacket_TelemetryConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPacket_SensorsConfig_descriptor_, &CommandPacket_SensorsConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPacket_MotorsConfig_descriptor_, &CommandPacket_MotorsConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TelemetryPacket_descriptor_, &TelemetryPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Communication_2eproto() {
  delete Attitude::default_instance_;
  delete Attitude_reflection_;
  delete MotorsControl::default_instance_;
  delete MotorsControl_reflection_;
  delete PID::default_instance_;
  delete PID_reflection_;
  delete Switches::default_instance_;
  delete Switches_reflection_;
  delete CommandPacket::default_instance_;
  delete CommandPacket_reflection_;
  delete CommandPacket_ControllerConfig::default_instance_;
  delete CommandPacket_ControllerConfig_reflection_;
  delete CommandPacket_TelemetryConfig::default_instance_;
  delete CommandPacket_TelemetryConfig_reflection_;
  delete CommandPacket_SensorsConfig::default_instance_;
  delete CommandPacket_SensorsConfig_reflection_;
  delete CommandPacket_MotorsConfig::default_instance_;
  delete CommandPacket_MotorsConfig_reflection_;
  delete TelemetryPacket::default_instance_;
  delete TelemetryPacket_reflection_;
}

void protobuf_AddDesc_Communication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Communication.proto\022\020org.hummingdroid\""
    "\222\001\n\010Attitude\022\020\n\010altitude\030\001 \001(\002\022\014\n\004roll\030\002"
    " \001(\002\022\021\n\troll_rate\030\003 \001(\002\022\r\n\005pitch\030\004 \001(\002\022\022"
    "\n\npitch_rate\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\022\020\n\010yaw_r"
    "ate\030\007 \001(\002\022\021\n\ttimestamp\030\010 \001(\001\"\202\001\n\rMotorsC"
    "ontrol\022\031\n\021altitude_throttle\030\001 \002(\002\022\025\n\rrol"
    "l_throttle\030\002 \002(\002\022\026\n\016pitch_throttle\030\003 \002(\002"
    "\022\024\n\014yaw_throttle\030\004 \002(\002\022\021\n\ttimestamp\030\005 \001("
    "\001\"A\n\003PID\022\n\n\002Kp\030\001 \002(\002\022\n\n\002Ki\030\002 \002(\002\022\n\n\002Kd\030\003"
    " \002(\002\022\n\n\002Ko\030\004 \002(\002\022\n\n\002Td\030\005 \002(\002\"Z\n\010Switches"
    "\022\022\n\nfront_left\030\001 \002(\010\022\023\n\013front_right\030\002 \002("
    "\010\022\022\n\nback_right\030\003 \002(\010\022\021\n\tback_left\030\004 \002(\010"
    "\"\266\010\n\rCommandPacket\022+\n\007command\030\001 \001(\0132\032.or"
    "g.hummingdroid.Attitude\022K\n\021controller_co"
    "nfig\030\002 \001(\01320.org.hummingdroid.CommandPac"
    "ket.ControllerConfig\022I\n\020telemetry_config"
    "\030\003 \001(\0132/.org.hummingdroid.CommandPacket."
    "TelemetryConfig\022E\n\016sensors_config\030\004 \001(\0132"
    "-.org.hummingdroid.CommandPacket.Sensors"
    "Config\022C\n\rmotors_config\030\005 \001(\0132,.org.humm"
    "ingdroid.CommandPacket.MotorsConfig\032\204\002\n\020"
    "ControllerConfig\022+\n\014altitude_pid\030\001 \002(\0132\025"
    ".org.hummingdroid.PID\022\'\n\010roll_pid\030\002 \002(\0132"
    "\025.org.hummingdroid.PID\022(\n\tpitch_pid\030\003 \002("
    "\0132\025.org.hummingdroid.PID\022+\n\014yaw_rate_pid"
    "\030\004 \002(\0132\025.org.hummingdroid.PID\022\027\n\017max_inc"
    "linaison\030\005 \001(\002\022\024\n\014max_altitude\030\006 \001(\002\022\024\n\014"
    "max_yaw_rate\030\007 \001(\002\032\217\001\n\017TelemetryConfig\022\014"
    "\n\004host\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\022\026\n\016commandEna"
    "bled\030\003 \002(\010\022\027\n\017attitudeEnabled\030\004 \002(\010\022\026\n\016c"
    "ontrolEnabled\030\005 \002(\010\022\027\n\017switchesEnabled\030\006"
    " \002(\010\032\210\002\n\rSensorsConfig\022\036\n\026accel_lowpass_"
    "constant\030\001 \002(\002\022\026\n\016gyro_roll_bias\030\002 \002(\002\022\027"
    "\n\017gyro_pitch_bias\030\003 \002(\002\022\025\n\rgyro_yaw_bias"
    "\030\004 \002(\002\022\026\n\016gyro_roll_gain\030\005 \002(\002\022\027\n\017gyro_p"
    "itch_gain\030\006 \002(\002\022\025\n\rgyro_yaw_gain\030\007 \002(\002\022\027"
    "\n\017accel_roll_bias\030\010 \002(\002\022\030\n\020accel_pitch_b"
    "ias\030\t \002(\002\022\024\n\014apply_modulo\030\n \002(\010\0320\n\014Motor"
    "sConfig\022\017\n\007min_pwm\030\001 \002(\005\022\017\n\007max_pwm\030\002 \002("
    "\005\"\314\001\n\017TelemetryPacket\022+\n\007command\030\001 \001(\0132\032"
    ".org.hummingdroid.Attitude\022,\n\010attitude\030\002"
    " \001(\0132\032.org.hummingdroid.Attitude\0220\n\007cont"
    "rol\030\003 \001(\0132\037.org.hummingdroid.MotorsContr"
    "ol\022,\n\010switches\030\004 \001(\0132\032.org.hummingdroid."
    "Switches", 1768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Communication.proto", &protobuf_RegisterTypes);
  Attitude::default_instance_ = new Attitude();
  MotorsControl::default_instance_ = new MotorsControl();
  PID::default_instance_ = new PID();
  Switches::default_instance_ = new Switches();
  CommandPacket::default_instance_ = new CommandPacket();
  CommandPacket_ControllerConfig::default_instance_ = new CommandPacket_ControllerConfig();
  CommandPacket_TelemetryConfig::default_instance_ = new CommandPacket_TelemetryConfig();
  CommandPacket_SensorsConfig::default_instance_ = new CommandPacket_SensorsConfig();
  CommandPacket_MotorsConfig::default_instance_ = new CommandPacket_MotorsConfig();
  TelemetryPacket::default_instance_ = new TelemetryPacket();
  Attitude::default_instance_->InitAsDefaultInstance();
  MotorsControl::default_instance_->InitAsDefaultInstance();
  PID::default_instance_->InitAsDefaultInstance();
  Switches::default_instance_->InitAsDefaultInstance();
  CommandPacket::default_instance_->InitAsDefaultInstance();
  CommandPacket_ControllerConfig::default_instance_->InitAsDefaultInstance();
  CommandPacket_TelemetryConfig::default_instance_->InitAsDefaultInstance();
  CommandPacket_SensorsConfig::default_instance_->InitAsDefaultInstance();
  CommandPacket_MotorsConfig::default_instance_->InitAsDefaultInstance();
  TelemetryPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Communication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Communication_2eproto {
  StaticDescriptorInitializer_Communication_2eproto() {
    protobuf_AddDesc_Communication_2eproto();
  }
} static_descriptor_initializer_Communication_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Attitude::kAltitudeFieldNumber;
const int Attitude::kRollFieldNumber;
const int Attitude::kRollRateFieldNumber;
const int Attitude::kPitchFieldNumber;
const int Attitude::kPitchRateFieldNumber;
const int Attitude::kYawFieldNumber;
const int Attitude::kYawRateFieldNumber;
const int Attitude::kTimestampFieldNumber;
#endif  // !_MSC_VER

Attitude::Attitude()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attitude::InitAsDefaultInstance() {
}

Attitude::Attitude(const Attitude& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attitude::SharedCtor() {
  _cached_size_ = 0;
  altitude_ = 0;
  roll_ = 0;
  roll_rate_ = 0;
  pitch_ = 0;
  pitch_rate_ = 0;
  yaw_ = 0;
  yaw_rate_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attitude::~Attitude() {
  SharedDtor();
}

void Attitude::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attitude::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attitude::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attitude_descriptor_;
}

const Attitude& Attitude::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

Attitude* Attitude::default_instance_ = NULL;

Attitude* Attitude::New() const {
  return new Attitude;
}

void Attitude::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altitude_ = 0;
    roll_ = 0;
    roll_rate_ = 0;
    pitch_ = 0;
    pitch_rate_ = 0;
    yaw_ = 0;
    yaw_rate_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attitude::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float altitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_roll;
        break;
      }

      // optional float roll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roll_rate;
        break;
      }

      // optional float roll_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_rate_)));
          set_has_roll_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pitch;
        break;
      }

      // optional float pitch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_pitch_rate;
        break;
      }

      // optional float pitch_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_rate_)));
          set_has_pitch_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_yaw;
        break;
      }

      // optional float yaw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_yaw_rate;
        break;
      }

      // optional float yaw_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
          set_has_yaw_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attitude::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float altitude = 1;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->altitude(), output);
  }

  // optional float roll = 2;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll(), output);
  }

  // optional float roll_rate = 3;
  if (has_roll_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll_rate(), output);
  }

  // optional float pitch = 4;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pitch(), output);
  }

  // optional float pitch_rate = 5;
  if (has_pitch_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch_rate(), output);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  // optional float yaw_rate = 7;
  if (has_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw_rate(), output);
  }

  // optional double timestamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attitude::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float altitude = 1;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->altitude(), target);
  }

  // optional float roll = 2;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll(), target);
  }

  // optional float roll_rate = 3;
  if (has_roll_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll_rate(), target);
  }

  // optional float pitch = 4;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pitch(), target);
  }

  // optional float pitch_rate = 5;
  if (has_pitch_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch_rate(), target);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  // optional float yaw_rate = 7;
  if (has_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw_rate(), target);
  }

  // optional double timestamp = 8;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attitude::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float altitude = 1;
    if (has_altitude()) {
      total_size += 1 + 4;
    }

    // optional float roll = 2;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional float roll_rate = 3;
    if (has_roll_rate()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 4;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float pitch_rate = 5;
    if (has_pitch_rate()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 7;
    if (has_yaw_rate()) {
      total_size += 1 + 4;
    }

    // optional double timestamp = 8;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attitude::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attitude* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attitude*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attitude::MergeFrom(const Attitude& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_roll_rate()) {
      set_roll_rate(from.roll_rate());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_pitch_rate()) {
      set_pitch_rate(from.pitch_rate());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_yaw_rate()) {
      set_yaw_rate(from.yaw_rate());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attitude::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attitude::CopyFrom(const Attitude& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attitude::IsInitialized() const {

  return true;
}

void Attitude::Swap(Attitude* other) {
  if (other != this) {
    std::swap(altitude_, other->altitude_);
    std::swap(roll_, other->roll_);
    std::swap(roll_rate_, other->roll_rate_);
    std::swap(pitch_, other->pitch_);
    std::swap(pitch_rate_, other->pitch_rate_);
    std::swap(yaw_, other->yaw_);
    std::swap(yaw_rate_, other->yaw_rate_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attitude::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attitude_descriptor_;
  metadata.reflection = Attitude_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MotorsControl::kAltitudeThrottleFieldNumber;
const int MotorsControl::kRollThrottleFieldNumber;
const int MotorsControl::kPitchThrottleFieldNumber;
const int MotorsControl::kYawThrottleFieldNumber;
const int MotorsControl::kTimestampFieldNumber;
#endif  // !_MSC_VER

MotorsControl::MotorsControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotorsControl::InitAsDefaultInstance() {
}

MotorsControl::MotorsControl(const MotorsControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotorsControl::SharedCtor() {
  _cached_size_ = 0;
  altitude_throttle_ = 0;
  roll_throttle_ = 0;
  pitch_throttle_ = 0;
  yaw_throttle_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotorsControl::~MotorsControl() {
  SharedDtor();
}

void MotorsControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotorsControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotorsControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotorsControl_descriptor_;
}

const MotorsControl& MotorsControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

MotorsControl* MotorsControl::default_instance_ = NULL;

MotorsControl* MotorsControl::New() const {
  return new MotorsControl;
}

void MotorsControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    altitude_throttle_ = 0;
    roll_throttle_ = 0;
    pitch_throttle_ = 0;
    yaw_throttle_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotorsControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float altitude_throttle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_throttle_)));
          set_has_altitude_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_roll_throttle;
        break;
      }

      // required float roll_throttle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_throttle_)));
          set_has_roll_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pitch_throttle;
        break;
      }

      // required float pitch_throttle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_throttle_)));
          set_has_pitch_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yaw_throttle;
        break;
      }

      // required float yaw_throttle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yaw_throttle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_throttle_)));
          set_has_yaw_throttle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotorsControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float altitude_throttle = 1;
  if (has_altitude_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->altitude_throttle(), output);
  }

  // required float roll_throttle = 2;
  if (has_roll_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll_throttle(), output);
  }

  // required float pitch_throttle = 3;
  if (has_pitch_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch_throttle(), output);
  }

  // required float yaw_throttle = 4;
  if (has_yaw_throttle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_throttle(), output);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotorsControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float altitude_throttle = 1;
  if (has_altitude_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->altitude_throttle(), target);
  }

  // required float roll_throttle = 2;
  if (has_roll_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll_throttle(), target);
  }

  // required float pitch_throttle = 3;
  if (has_pitch_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch_throttle(), target);
  }

  // required float yaw_throttle = 4;
  if (has_yaw_throttle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw_throttle(), target);
  }

  // optional double timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotorsControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float altitude_throttle = 1;
    if (has_altitude_throttle()) {
      total_size += 1 + 4;
    }

    // required float roll_throttle = 2;
    if (has_roll_throttle()) {
      total_size += 1 + 4;
    }

    // required float pitch_throttle = 3;
    if (has_pitch_throttle()) {
      total_size += 1 + 4;
    }

    // required float yaw_throttle = 4;
    if (has_yaw_throttle()) {
      total_size += 1 + 4;
    }

    // optional double timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotorsControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotorsControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotorsControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotorsControl::MergeFrom(const MotorsControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altitude_throttle()) {
      set_altitude_throttle(from.altitude_throttle());
    }
    if (from.has_roll_throttle()) {
      set_roll_throttle(from.roll_throttle());
    }
    if (from.has_pitch_throttle()) {
      set_pitch_throttle(from.pitch_throttle());
    }
    if (from.has_yaw_throttle()) {
      set_yaw_throttle(from.yaw_throttle());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotorsControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorsControl::CopyFrom(const MotorsControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorsControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MotorsControl::Swap(MotorsControl* other) {
  if (other != this) {
    std::swap(altitude_throttle_, other->altitude_throttle_);
    std::swap(roll_throttle_, other->roll_throttle_);
    std::swap(pitch_throttle_, other->pitch_throttle_);
    std::swap(yaw_throttle_, other->yaw_throttle_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotorsControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotorsControl_descriptor_;
  metadata.reflection = MotorsControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PID::kKpFieldNumber;
const int PID::kKiFieldNumber;
const int PID::kKdFieldNumber;
const int PID::kKoFieldNumber;
const int PID::kTdFieldNumber;
#endif  // !_MSC_VER

PID::PID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PID::InitAsDefaultInstance() {
}

PID::PID(const PID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PID::SharedCtor() {
  _cached_size_ = 0;
  kp_ = 0;
  ki_ = 0;
  kd_ = 0;
  ko_ = 0;
  td_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PID::~PID() {
  SharedDtor();
}

void PID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PID_descriptor_;
}

const PID& PID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

PID* PID::default_instance_ = NULL;

PID* PID::New() const {
  return new PID;
}

void PID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kp_ = 0;
    ki_ = 0;
    kd_ = 0;
    ko_ = 0;
    td_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Kp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kp_)));
          set_has_kp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Ki;
        break;
      }

      // required float Ki = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Ki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ki_)));
          set_has_ki();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Kd;
        break;
      }

      // required float Kd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Kd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kd_)));
          set_has_kd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Ko;
        break;
      }

      // required float Ko = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Ko:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ko_)));
          set_has_ko();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Td;
        break;
      }

      // required float Td = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Td:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &td_)));
          set_has_td();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float Kp = 1;
  if (has_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->kp(), output);
  }

  // required float Ki = 2;
  if (has_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ki(), output);
  }

  // required float Kd = 3;
  if (has_kd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kd(), output);
  }

  // required float Ko = 4;
  if (has_ko()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ko(), output);
  }

  // required float Td = 5;
  if (has_td()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->td(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float Kp = 1;
  if (has_kp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->kp(), target);
  }

  // required float Ki = 2;
  if (has_ki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ki(), target);
  }

  // required float Kd = 3;
  if (has_kd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kd(), target);
  }

  // required float Ko = 4;
  if (has_ko()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ko(), target);
  }

  // required float Td = 5;
  if (has_td()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->td(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float Kp = 1;
    if (has_kp()) {
      total_size += 1 + 4;
    }

    // required float Ki = 2;
    if (has_ki()) {
      total_size += 1 + 4;
    }

    // required float Kd = 3;
    if (has_kd()) {
      total_size += 1 + 4;
    }

    // required float Ko = 4;
    if (has_ko()) {
      total_size += 1 + 4;
    }

    // required float Td = 5;
    if (has_td()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PID::MergeFrom(const PID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kp()) {
      set_kp(from.kp());
    }
    if (from.has_ki()) {
      set_ki(from.ki());
    }
    if (from.has_kd()) {
      set_kd(from.kd());
    }
    if (from.has_ko()) {
      set_ko(from.ko());
    }
    if (from.has_td()) {
      set_td(from.td());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID::CopyFrom(const PID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PID::Swap(PID* other) {
  if (other != this) {
    std::swap(kp_, other->kp_);
    std::swap(ki_, other->ki_);
    std::swap(kd_, other->kd_);
    std::swap(ko_, other->ko_);
    std::swap(td_, other->td_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PID_descriptor_;
  metadata.reflection = PID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Switches::kFrontLeftFieldNumber;
const int Switches::kFrontRightFieldNumber;
const int Switches::kBackRightFieldNumber;
const int Switches::kBackLeftFieldNumber;
#endif  // !_MSC_VER

Switches::Switches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Switches::InitAsDefaultInstance() {
}

Switches::Switches(const Switches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Switches::SharedCtor() {
  _cached_size_ = 0;
  front_left_ = false;
  front_right_ = false;
  back_right_ = false;
  back_left_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Switches::~Switches() {
  SharedDtor();
}

void Switches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Switches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Switches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Switches_descriptor_;
}

const Switches& Switches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

Switches* Switches::default_instance_ = NULL;

Switches* Switches::New() const {
  return new Switches;
}

void Switches::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    front_left_ = false;
    front_right_ = false;
    back_right_ = false;
    back_left_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Switches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool front_left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_left_)));
          set_has_front_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_front_right;
        break;
      }

      // required bool front_right = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_front_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_right_)));
          set_has_front_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_back_right;
        break;
      }

      // required bool back_right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_right_)));
          set_has_back_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_back_left;
        break;
      }

      // required bool back_left = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_left_)));
          set_has_back_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Switches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool front_left = 1;
  if (has_front_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->front_left(), output);
  }

  // required bool front_right = 2;
  if (has_front_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->front_right(), output);
  }

  // required bool back_right = 3;
  if (has_back_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->back_right(), output);
  }

  // required bool back_left = 4;
  if (has_back_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->back_left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Switches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool front_left = 1;
  if (has_front_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->front_left(), target);
  }

  // required bool front_right = 2;
  if (has_front_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->front_right(), target);
  }

  // required bool back_right = 3;
  if (has_back_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->back_right(), target);
  }

  // required bool back_left = 4;
  if (has_back_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->back_left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Switches::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool front_left = 1;
    if (has_front_left()) {
      total_size += 1 + 1;
    }

    // required bool front_right = 2;
    if (has_front_right()) {
      total_size += 1 + 1;
    }

    // required bool back_right = 3;
    if (has_back_right()) {
      total_size += 1 + 1;
    }

    // required bool back_left = 4;
    if (has_back_left()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Switches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Switches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Switches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Switches::MergeFrom(const Switches& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_front_left()) {
      set_front_left(from.front_left());
    }
    if (from.has_front_right()) {
      set_front_right(from.front_right());
    }
    if (from.has_back_right()) {
      set_back_right(from.back_right());
    }
    if (from.has_back_left()) {
      set_back_left(from.back_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Switches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Switches::CopyFrom(const Switches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Switches::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Switches::Swap(Switches* other) {
  if (other != this) {
    std::swap(front_left_, other->front_left_);
    std::swap(front_right_, other->front_right_);
    std::swap(back_right_, other->back_right_);
    std::swap(back_left_, other->back_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Switches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Switches_descriptor_;
  metadata.reflection = Switches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandPacket_ControllerConfig::kAltitudePidFieldNumber;
const int CommandPacket_ControllerConfig::kRollPidFieldNumber;
const int CommandPacket_ControllerConfig::kPitchPidFieldNumber;
const int CommandPacket_ControllerConfig::kYawRatePidFieldNumber;
const int CommandPacket_ControllerConfig::kMaxInclinaisonFieldNumber;
const int CommandPacket_ControllerConfig::kMaxAltitudeFieldNumber;
const int CommandPacket_ControllerConfig::kMaxYawRateFieldNumber;
#endif  // !_MSC_VER

CommandPacket_ControllerConfig::CommandPacket_ControllerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPacket_ControllerConfig::InitAsDefaultInstance() {
  altitude_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
  roll_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
  pitch_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
  yaw_rate_pid_ = const_cast< ::org::hummingdroid::PID*>(&::org::hummingdroid::PID::default_instance());
}

CommandPacket_ControllerConfig::CommandPacket_ControllerConfig(const CommandPacket_ControllerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_ControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  altitude_pid_ = NULL;
  roll_pid_ = NULL;
  pitch_pid_ = NULL;
  yaw_rate_pid_ = NULL;
  max_inclinaison_ = 0;
  max_altitude_ = 0;
  max_yaw_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_ControllerConfig::~CommandPacket_ControllerConfig() {
  SharedDtor();
}

void CommandPacket_ControllerConfig::SharedDtor() {
  if (this != default_instance_) {
    delete altitude_pid_;
    delete roll_pid_;
    delete pitch_pid_;
    delete yaw_rate_pid_;
  }
}

void CommandPacket_ControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPacket_ControllerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPacket_ControllerConfig_descriptor_;
}

const CommandPacket_ControllerConfig& CommandPacket_ControllerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

CommandPacket_ControllerConfig* CommandPacket_ControllerConfig::default_instance_ = NULL;

CommandPacket_ControllerConfig* CommandPacket_ControllerConfig::New() const {
  return new CommandPacket_ControllerConfig;
}

void CommandPacket_ControllerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_altitude_pid()) {
      if (altitude_pid_ != NULL) altitude_pid_->::org::hummingdroid::PID::Clear();
    }
    if (has_roll_pid()) {
      if (roll_pid_ != NULL) roll_pid_->::org::hummingdroid::PID::Clear();
    }
    if (has_pitch_pid()) {
      if (pitch_pid_ != NULL) pitch_pid_->::org::hummingdroid::PID::Clear();
    }
    if (has_yaw_rate_pid()) {
      if (yaw_rate_pid_ != NULL) yaw_rate_pid_->::org::hummingdroid::PID::Clear();
    }
    max_inclinaison_ = 0;
    max_altitude_ = 0;
    max_yaw_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPacket_ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .org.hummingdroid.PID altitude_pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_altitude_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roll_pid;
        break;
      }

      // required .org.hummingdroid.PID roll_pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roll_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roll_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pitch_pid;
        break;
      }

      // required .org.hummingdroid.PID pitch_pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pitch_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pitch_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yaw_rate_pid;
        break;
      }

      // required .org.hummingdroid.PID yaw_rate_pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yaw_rate_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yaw_rate_pid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_max_inclinaison;
        break;
      }

      // optional float max_inclinaison = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_inclinaison:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_inclinaison_)));
          set_has_max_inclinaison();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_max_altitude;
        break;
      }

      // optional float max_altitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_altitude_)));
          set_has_max_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_max_yaw_rate;
        break;
      }

      // optional float max_yaw_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_yaw_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_yaw_rate_)));
          set_has_max_yaw_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .org.hummingdroid.PID altitude_pid = 1;
  if (has_altitude_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->altitude_pid(), output);
  }

  // required .org.hummingdroid.PID roll_pid = 2;
  if (has_roll_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roll_pid(), output);
  }

  // required .org.hummingdroid.PID pitch_pid = 3;
  if (has_pitch_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pitch_pid(), output);
  }

  // required .org.hummingdroid.PID yaw_rate_pid = 4;
  if (has_yaw_rate_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->yaw_rate_pid(), output);
  }

  // optional float max_inclinaison = 5;
  if (has_max_inclinaison()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_inclinaison(), output);
  }

  // optional float max_altitude = 6;
  if (has_max_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max_altitude(), output);
  }

  // optional float max_yaw_rate = 7;
  if (has_max_yaw_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_yaw_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPacket_ControllerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .org.hummingdroid.PID altitude_pid = 1;
  if (has_altitude_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->altitude_pid(), target);
  }

  // required .org.hummingdroid.PID roll_pid = 2;
  if (has_roll_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roll_pid(), target);
  }

  // required .org.hummingdroid.PID pitch_pid = 3;
  if (has_pitch_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pitch_pid(), target);
  }

  // required .org.hummingdroid.PID yaw_rate_pid = 4;
  if (has_yaw_rate_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->yaw_rate_pid(), target);
  }

  // optional float max_inclinaison = 5;
  if (has_max_inclinaison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_inclinaison(), target);
  }

  // optional float max_altitude = 6;
  if (has_max_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->max_altitude(), target);
  }

  // optional float max_yaw_rate = 7;
  if (has_max_yaw_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_yaw_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPacket_ControllerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .org.hummingdroid.PID altitude_pid = 1;
    if (has_altitude_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->altitude_pid());
    }

    // required .org.hummingdroid.PID roll_pid = 2;
    if (has_roll_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roll_pid());
    }

    // required .org.hummingdroid.PID pitch_pid = 3;
    if (has_pitch_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pitch_pid());
    }

    // required .org.hummingdroid.PID yaw_rate_pid = 4;
    if (has_yaw_rate_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yaw_rate_pid());
    }

    // optional float max_inclinaison = 5;
    if (has_max_inclinaison()) {
      total_size += 1 + 4;
    }

    // optional float max_altitude = 6;
    if (has_max_altitude()) {
      total_size += 1 + 4;
    }

    // optional float max_yaw_rate = 7;
    if (has_max_yaw_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_ControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPacket_ControllerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPacket_ControllerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPacket_ControllerConfig::MergeFrom(const CommandPacket_ControllerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_altitude_pid()) {
      mutable_altitude_pid()->::org::hummingdroid::PID::MergeFrom(from.altitude_pid());
    }
    if (from.has_roll_pid()) {
      mutable_roll_pid()->::org::hummingdroid::PID::MergeFrom(from.roll_pid());
    }
    if (from.has_pitch_pid()) {
      mutable_pitch_pid()->::org::hummingdroid::PID::MergeFrom(from.pitch_pid());
    }
    if (from.has_yaw_rate_pid()) {
      mutable_yaw_rate_pid()->::org::hummingdroid::PID::MergeFrom(from.yaw_rate_pid());
    }
    if (from.has_max_inclinaison()) {
      set_max_inclinaison(from.max_inclinaison());
    }
    if (from.has_max_altitude()) {
      set_max_altitude(from.max_altitude());
    }
    if (from.has_max_yaw_rate()) {
      set_max_yaw_rate(from.max_yaw_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPacket_ControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPacket_ControllerConfig::CopyFrom(const CommandPacket_ControllerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_ControllerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_altitude_pid()) {
    if (!this->altitude_pid().IsInitialized()) return false;
  }
  if (has_roll_pid()) {
    if (!this->roll_pid().IsInitialized()) return false;
  }
  if (has_pitch_pid()) {
    if (!this->pitch_pid().IsInitialized()) return false;
  }
  if (has_yaw_rate_pid()) {
    if (!this->yaw_rate_pid().IsInitialized()) return false;
  }
  return true;
}

void CommandPacket_ControllerConfig::Swap(CommandPacket_ControllerConfig* other) {
  if (other != this) {
    std::swap(altitude_pid_, other->altitude_pid_);
    std::swap(roll_pid_, other->roll_pid_);
    std::swap(pitch_pid_, other->pitch_pid_);
    std::swap(yaw_rate_pid_, other->yaw_rate_pid_);
    std::swap(max_inclinaison_, other->max_inclinaison_);
    std::swap(max_altitude_, other->max_altitude_);
    std::swap(max_yaw_rate_, other->max_yaw_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPacket_ControllerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPacket_ControllerConfig_descriptor_;
  metadata.reflection = CommandPacket_ControllerConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket_TelemetryConfig::kHostFieldNumber;
const int CommandPacket_TelemetryConfig::kPortFieldNumber;
const int CommandPacket_TelemetryConfig::kCommandEnabledFieldNumber;
const int CommandPacket_TelemetryConfig::kAttitudeEnabledFieldNumber;
const int CommandPacket_TelemetryConfig::kControlEnabledFieldNumber;
const int CommandPacket_TelemetryConfig::kSwitchesEnabledFieldNumber;
#endif  // !_MSC_VER

CommandPacket_TelemetryConfig::CommandPacket_TelemetryConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPacket_TelemetryConfig::InitAsDefaultInstance() {
}

CommandPacket_TelemetryConfig::CommandPacket_TelemetryConfig(const CommandPacket_TelemetryConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_TelemetryConfig::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  commandenabled_ = false;
  attitudeenabled_ = false;
  controlenabled_ = false;
  switchesenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_TelemetryConfig::~CommandPacket_TelemetryConfig() {
  SharedDtor();
}

void CommandPacket_TelemetryConfig::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void CommandPacket_TelemetryConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPacket_TelemetryConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPacket_TelemetryConfig_descriptor_;
}

const CommandPacket_TelemetryConfig& CommandPacket_TelemetryConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

CommandPacket_TelemetryConfig* CommandPacket_TelemetryConfig::default_instance_ = NULL;

CommandPacket_TelemetryConfig* CommandPacket_TelemetryConfig::New() const {
  return new CommandPacket_TelemetryConfig;
}

void CommandPacket_TelemetryConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
    commandenabled_ = false;
    attitudeenabled_ = false;
    controlenabled_ = false;
    switchesenabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPacket_TelemetryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commandEnabled;
        break;
      }

      // required bool commandEnabled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commandEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &commandenabled_)));
          set_has_commandenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attitudeEnabled;
        break;
      }

      // required bool attitudeEnabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attitudeEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attitudeenabled_)));
          set_has_attitudeenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_controlEnabled;
        break;
      }

      // required bool controlEnabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &controlenabled_)));
          set_has_controlenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_switchesEnabled;
        break;
      }

      // required bool switchesEnabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_switchesEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &switchesenabled_)));
          set_has_switchesenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_TelemetryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required bool commandEnabled = 3;
  if (has_commandenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->commandenabled(), output);
  }

  // required bool attitudeEnabled = 4;
  if (has_attitudeenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->attitudeenabled(), output);
  }

  // required bool controlEnabled = 5;
  if (has_controlenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->controlenabled(), output);
  }

  // required bool switchesEnabled = 6;
  if (has_switchesenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->switchesenabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPacket_TelemetryConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required bool commandEnabled = 3;
  if (has_commandenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->commandenabled(), target);
  }

  // required bool attitudeEnabled = 4;
  if (has_attitudeenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->attitudeenabled(), target);
  }

  // required bool controlEnabled = 5;
  if (has_controlenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->controlenabled(), target);
  }

  // required bool switchesEnabled = 6;
  if (has_switchesenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->switchesenabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPacket_TelemetryConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required bool commandEnabled = 3;
    if (has_commandenabled()) {
      total_size += 1 + 1;
    }

    // required bool attitudeEnabled = 4;
    if (has_attitudeenabled()) {
      total_size += 1 + 1;
    }

    // required bool controlEnabled = 5;
    if (has_controlenabled()) {
      total_size += 1 + 1;
    }

    // required bool switchesEnabled = 6;
    if (has_switchesenabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_TelemetryConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPacket_TelemetryConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPacket_TelemetryConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPacket_TelemetryConfig::MergeFrom(const CommandPacket_TelemetryConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_commandenabled()) {
      set_commandenabled(from.commandenabled());
    }
    if (from.has_attitudeenabled()) {
      set_attitudeenabled(from.attitudeenabled());
    }
    if (from.has_controlenabled()) {
      set_controlenabled(from.controlenabled());
    }
    if (from.has_switchesenabled()) {
      set_switchesenabled(from.switchesenabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPacket_TelemetryConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPacket_TelemetryConfig::CopyFrom(const CommandPacket_TelemetryConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_TelemetryConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CommandPacket_TelemetryConfig::Swap(CommandPacket_TelemetryConfig* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(commandenabled_, other->commandenabled_);
    std::swap(attitudeenabled_, other->attitudeenabled_);
    std::swap(controlenabled_, other->controlenabled_);
    std::swap(switchesenabled_, other->switchesenabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPacket_TelemetryConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPacket_TelemetryConfig_descriptor_;
  metadata.reflection = CommandPacket_TelemetryConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket_SensorsConfig::kAccelLowpassConstantFieldNumber;
const int CommandPacket_SensorsConfig::kGyroRollBiasFieldNumber;
const int CommandPacket_SensorsConfig::kGyroPitchBiasFieldNumber;
const int CommandPacket_SensorsConfig::kGyroYawBiasFieldNumber;
const int CommandPacket_SensorsConfig::kGyroRollGainFieldNumber;
const int CommandPacket_SensorsConfig::kGyroPitchGainFieldNumber;
const int CommandPacket_SensorsConfig::kGyroYawGainFieldNumber;
const int CommandPacket_SensorsConfig::kAccelRollBiasFieldNumber;
const int CommandPacket_SensorsConfig::kAccelPitchBiasFieldNumber;
const int CommandPacket_SensorsConfig::kApplyModuloFieldNumber;
#endif  // !_MSC_VER

CommandPacket_SensorsConfig::CommandPacket_SensorsConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPacket_SensorsConfig::InitAsDefaultInstance() {
}

CommandPacket_SensorsConfig::CommandPacket_SensorsConfig(const CommandPacket_SensorsConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_SensorsConfig::SharedCtor() {
  _cached_size_ = 0;
  accel_lowpass_constant_ = 0;
  gyro_roll_bias_ = 0;
  gyro_pitch_bias_ = 0;
  gyro_yaw_bias_ = 0;
  gyro_roll_gain_ = 0;
  gyro_pitch_gain_ = 0;
  gyro_yaw_gain_ = 0;
  accel_roll_bias_ = 0;
  accel_pitch_bias_ = 0;
  apply_modulo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_SensorsConfig::~CommandPacket_SensorsConfig() {
  SharedDtor();
}

void CommandPacket_SensorsConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandPacket_SensorsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPacket_SensorsConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPacket_SensorsConfig_descriptor_;
}

const CommandPacket_SensorsConfig& CommandPacket_SensorsConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

CommandPacket_SensorsConfig* CommandPacket_SensorsConfig::default_instance_ = NULL;

CommandPacket_SensorsConfig* CommandPacket_SensorsConfig::New() const {
  return new CommandPacket_SensorsConfig;
}

void CommandPacket_SensorsConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accel_lowpass_constant_ = 0;
    gyro_roll_bias_ = 0;
    gyro_pitch_bias_ = 0;
    gyro_yaw_bias_ = 0;
    gyro_roll_gain_ = 0;
    gyro_pitch_gain_ = 0;
    gyro_yaw_gain_ = 0;
    accel_roll_bias_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accel_pitch_bias_ = 0;
    apply_modulo_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPacket_SensorsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float accel_lowpass_constant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_lowpass_constant_)));
          set_has_accel_lowpass_constant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_gyro_roll_bias;
        break;
      }

      // required float gyro_roll_bias = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_roll_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_roll_bias_)));
          set_has_gyro_roll_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_gyro_pitch_bias;
        break;
      }

      // required float gyro_pitch_bias = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_pitch_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_pitch_bias_)));
          set_has_gyro_pitch_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_gyro_yaw_bias;
        break;
      }

      // required float gyro_yaw_bias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_yaw_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_yaw_bias_)));
          set_has_gyro_yaw_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gyro_roll_gain;
        break;
      }

      // required float gyro_roll_gain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_roll_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_roll_gain_)));
          set_has_gyro_roll_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_gyro_pitch_gain;
        break;
      }

      // required float gyro_pitch_gain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_pitch_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_pitch_gain_)));
          set_has_gyro_pitch_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_gyro_yaw_gain;
        break;
      }

      // required float gyro_yaw_gain = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gyro_yaw_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyro_yaw_gain_)));
          set_has_gyro_yaw_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_accel_roll_bias;
        break;
      }

      // required float accel_roll_bias = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accel_roll_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_roll_bias_)));
          set_has_accel_roll_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_accel_pitch_bias;
        break;
      }

      // required float accel_pitch_bias = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accel_pitch_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_pitch_bias_)));
          set_has_accel_pitch_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_apply_modulo;
        break;
      }

      // required bool apply_modulo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_modulo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_modulo_)));
          set_has_apply_modulo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_SensorsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float accel_lowpass_constant = 1;
  if (has_accel_lowpass_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->accel_lowpass_constant(), output);
  }

  // required float gyro_roll_bias = 2;
  if (has_gyro_roll_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gyro_roll_bias(), output);
  }

  // required float gyro_pitch_bias = 3;
  if (has_gyro_pitch_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gyro_pitch_bias(), output);
  }

  // required float gyro_yaw_bias = 4;
  if (has_gyro_yaw_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gyro_yaw_bias(), output);
  }

  // required float gyro_roll_gain = 5;
  if (has_gyro_roll_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gyro_roll_gain(), output);
  }

  // required float gyro_pitch_gain = 6;
  if (has_gyro_pitch_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gyro_pitch_gain(), output);
  }

  // required float gyro_yaw_gain = 7;
  if (has_gyro_yaw_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->gyro_yaw_gain(), output);
  }

  // required float accel_roll_bias = 8;
  if (has_accel_roll_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->accel_roll_bias(), output);
  }

  // required float accel_pitch_bias = 9;
  if (has_accel_pitch_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->accel_pitch_bias(), output);
  }

  // required bool apply_modulo = 10;
  if (has_apply_modulo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->apply_modulo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPacket_SensorsConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float accel_lowpass_constant = 1;
  if (has_accel_lowpass_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->accel_lowpass_constant(), target);
  }

  // required float gyro_roll_bias = 2;
  if (has_gyro_roll_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gyro_roll_bias(), target);
  }

  // required float gyro_pitch_bias = 3;
  if (has_gyro_pitch_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gyro_pitch_bias(), target);
  }

  // required float gyro_yaw_bias = 4;
  if (has_gyro_yaw_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gyro_yaw_bias(), target);
  }

  // required float gyro_roll_gain = 5;
  if (has_gyro_roll_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gyro_roll_gain(), target);
  }

  // required float gyro_pitch_gain = 6;
  if (has_gyro_pitch_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gyro_pitch_gain(), target);
  }

  // required float gyro_yaw_gain = 7;
  if (has_gyro_yaw_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->gyro_yaw_gain(), target);
  }

  // required float accel_roll_bias = 8;
  if (has_accel_roll_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->accel_roll_bias(), target);
  }

  // required float accel_pitch_bias = 9;
  if (has_accel_pitch_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->accel_pitch_bias(), target);
  }

  // required bool apply_modulo = 10;
  if (has_apply_modulo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->apply_modulo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPacket_SensorsConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float accel_lowpass_constant = 1;
    if (has_accel_lowpass_constant()) {
      total_size += 1 + 4;
    }

    // required float gyro_roll_bias = 2;
    if (has_gyro_roll_bias()) {
      total_size += 1 + 4;
    }

    // required float gyro_pitch_bias = 3;
    if (has_gyro_pitch_bias()) {
      total_size += 1 + 4;
    }

    // required float gyro_yaw_bias = 4;
    if (has_gyro_yaw_bias()) {
      total_size += 1 + 4;
    }

    // required float gyro_roll_gain = 5;
    if (has_gyro_roll_gain()) {
      total_size += 1 + 4;
    }

    // required float gyro_pitch_gain = 6;
    if (has_gyro_pitch_gain()) {
      total_size += 1 + 4;
    }

    // required float gyro_yaw_gain = 7;
    if (has_gyro_yaw_gain()) {
      total_size += 1 + 4;
    }

    // required float accel_roll_bias = 8;
    if (has_accel_roll_bias()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float accel_pitch_bias = 9;
    if (has_accel_pitch_bias()) {
      total_size += 1 + 4;
    }

    // required bool apply_modulo = 10;
    if (has_apply_modulo()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_SensorsConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPacket_SensorsConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPacket_SensorsConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPacket_SensorsConfig::MergeFrom(const CommandPacket_SensorsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accel_lowpass_constant()) {
      set_accel_lowpass_constant(from.accel_lowpass_constant());
    }
    if (from.has_gyro_roll_bias()) {
      set_gyro_roll_bias(from.gyro_roll_bias());
    }
    if (from.has_gyro_pitch_bias()) {
      set_gyro_pitch_bias(from.gyro_pitch_bias());
    }
    if (from.has_gyro_yaw_bias()) {
      set_gyro_yaw_bias(from.gyro_yaw_bias());
    }
    if (from.has_gyro_roll_gain()) {
      set_gyro_roll_gain(from.gyro_roll_gain());
    }
    if (from.has_gyro_pitch_gain()) {
      set_gyro_pitch_gain(from.gyro_pitch_gain());
    }
    if (from.has_gyro_yaw_gain()) {
      set_gyro_yaw_gain(from.gyro_yaw_gain());
    }
    if (from.has_accel_roll_bias()) {
      set_accel_roll_bias(from.accel_roll_bias());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accel_pitch_bias()) {
      set_accel_pitch_bias(from.accel_pitch_bias());
    }
    if (from.has_apply_modulo()) {
      set_apply_modulo(from.apply_modulo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPacket_SensorsConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPacket_SensorsConfig::CopyFrom(const CommandPacket_SensorsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_SensorsConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void CommandPacket_SensorsConfig::Swap(CommandPacket_SensorsConfig* other) {
  if (other != this) {
    std::swap(accel_lowpass_constant_, other->accel_lowpass_constant_);
    std::swap(gyro_roll_bias_, other->gyro_roll_bias_);
    std::swap(gyro_pitch_bias_, other->gyro_pitch_bias_);
    std::swap(gyro_yaw_bias_, other->gyro_yaw_bias_);
    std::swap(gyro_roll_gain_, other->gyro_roll_gain_);
    std::swap(gyro_pitch_gain_, other->gyro_pitch_gain_);
    std::swap(gyro_yaw_gain_, other->gyro_yaw_gain_);
    std::swap(accel_roll_bias_, other->accel_roll_bias_);
    std::swap(accel_pitch_bias_, other->accel_pitch_bias_);
    std::swap(apply_modulo_, other->apply_modulo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPacket_SensorsConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPacket_SensorsConfig_descriptor_;
  metadata.reflection = CommandPacket_SensorsConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket_MotorsConfig::kMinPwmFieldNumber;
const int CommandPacket_MotorsConfig::kMaxPwmFieldNumber;
#endif  // !_MSC_VER

CommandPacket_MotorsConfig::CommandPacket_MotorsConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPacket_MotorsConfig::InitAsDefaultInstance() {
}

CommandPacket_MotorsConfig::CommandPacket_MotorsConfig(const CommandPacket_MotorsConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket_MotorsConfig::SharedCtor() {
  _cached_size_ = 0;
  min_pwm_ = 0;
  max_pwm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket_MotorsConfig::~CommandPacket_MotorsConfig() {
  SharedDtor();
}

void CommandPacket_MotorsConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandPacket_MotorsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPacket_MotorsConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPacket_MotorsConfig_descriptor_;
}

const CommandPacket_MotorsConfig& CommandPacket_MotorsConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

CommandPacket_MotorsConfig* CommandPacket_MotorsConfig::default_instance_ = NULL;

CommandPacket_MotorsConfig* CommandPacket_MotorsConfig::New() const {
  return new CommandPacket_MotorsConfig;
}

void CommandPacket_MotorsConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_pwm_ = 0;
    max_pwm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPacket_MotorsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_pwm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_pwm_)));
          set_has_min_pwm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_pwm;
        break;
      }

      // required int32 max_pwm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_pwm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pwm_)));
          set_has_max_pwm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket_MotorsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 min_pwm = 1;
  if (has_min_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_pwm(), output);
  }

  // required int32 max_pwm = 2;
  if (has_max_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_pwm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPacket_MotorsConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 min_pwm = 1;
  if (has_min_pwm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_pwm(), target);
  }

  // required int32 max_pwm = 2;
  if (has_max_pwm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_pwm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPacket_MotorsConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_pwm = 1;
    if (has_min_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_pwm());
    }

    // required int32 max_pwm = 2;
    if (has_max_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pwm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket_MotorsConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPacket_MotorsConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPacket_MotorsConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPacket_MotorsConfig::MergeFrom(const CommandPacket_MotorsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_pwm()) {
      set_min_pwm(from.min_pwm());
    }
    if (from.has_max_pwm()) {
      set_max_pwm(from.max_pwm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPacket_MotorsConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPacket_MotorsConfig::CopyFrom(const CommandPacket_MotorsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket_MotorsConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommandPacket_MotorsConfig::Swap(CommandPacket_MotorsConfig* other) {
  if (other != this) {
    std::swap(min_pwm_, other->min_pwm_);
    std::swap(max_pwm_, other->max_pwm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPacket_MotorsConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPacket_MotorsConfig_descriptor_;
  metadata.reflection = CommandPacket_MotorsConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandPacket::kCommandFieldNumber;
const int CommandPacket::kControllerConfigFieldNumber;
const int CommandPacket::kTelemetryConfigFieldNumber;
const int CommandPacket::kSensorsConfigFieldNumber;
const int CommandPacket::kMotorsConfigFieldNumber;
#endif  // !_MSC_VER

CommandPacket::CommandPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPacket::InitAsDefaultInstance() {
  command_ = const_cast< ::org::hummingdroid::Attitude*>(&::org::hummingdroid::Attitude::default_instance());
  controller_config_ = const_cast< ::org::hummingdroid::CommandPacket_ControllerConfig*>(&::org::hummingdroid::CommandPacket_ControllerConfig::default_instance());
  telemetry_config_ = const_cast< ::org::hummingdroid::CommandPacket_TelemetryConfig*>(&::org::hummingdroid::CommandPacket_TelemetryConfig::default_instance());
  sensors_config_ = const_cast< ::org::hummingdroid::CommandPacket_SensorsConfig*>(&::org::hummingdroid::CommandPacket_SensorsConfig::default_instance());
  motors_config_ = const_cast< ::org::hummingdroid::CommandPacket_MotorsConfig*>(&::org::hummingdroid::CommandPacket_MotorsConfig::default_instance());
}

CommandPacket::CommandPacket(const CommandPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPacket::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  controller_config_ = NULL;
  telemetry_config_ = NULL;
  sensors_config_ = NULL;
  motors_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPacket::~CommandPacket() {
  SharedDtor();
}

void CommandPacket::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
    delete controller_config_;
    delete telemetry_config_;
    delete sensors_config_;
    delete motors_config_;
  }
}

void CommandPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPacket_descriptor_;
}

const CommandPacket& CommandPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

CommandPacket* CommandPacket::default_instance_ = NULL;

CommandPacket* CommandPacket::New() const {
  return new CommandPacket;
}

void CommandPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != NULL) command_->::org::hummingdroid::Attitude::Clear();
    }
    if (has_controller_config()) {
      if (controller_config_ != NULL) controller_config_->::org::hummingdroid::CommandPacket_ControllerConfig::Clear();
    }
    if (has_telemetry_config()) {
      if (telemetry_config_ != NULL) telemetry_config_->::org::hummingdroid::CommandPacket_TelemetryConfig::Clear();
    }
    if (has_sensors_config()) {
      if (sensors_config_ != NULL) sensors_config_->::org::hummingdroid::CommandPacket_SensorsConfig::Clear();
    }
    if (has_motors_config()) {
      if (motors_config_ != NULL) motors_config_->::org::hummingdroid::CommandPacket_MotorsConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.hummingdroid.Attitude command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_controller_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.ControllerConfig controller_config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_controller_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controller_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_telemetry_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.TelemetryConfig telemetry_config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telemetry_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telemetry_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sensors_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.SensorsConfig sensors_config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensors_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensors_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motors_config;
        break;
      }

      // optional .org.hummingdroid.CommandPacket.MotorsConfig motors_config = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motors_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motors_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .org.hummingdroid.Attitude command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(), output);
  }

  // optional .org.hummingdroid.CommandPacket.ControllerConfig controller_config = 2;
  if (has_controller_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->controller_config(), output);
  }

  // optional .org.hummingdroid.CommandPacket.TelemetryConfig telemetry_config = 3;
  if (has_telemetry_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->telemetry_config(), output);
  }

  // optional .org.hummingdroid.CommandPacket.SensorsConfig sensors_config = 4;
  if (has_sensors_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sensors_config(), output);
  }

  // optional .org.hummingdroid.CommandPacket.MotorsConfig motors_config = 5;
  if (has_motors_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->motors_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .org.hummingdroid.Attitude command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(), target);
  }

  // optional .org.hummingdroid.CommandPacket.ControllerConfig controller_config = 2;
  if (has_controller_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->controller_config(), target);
  }

  // optional .org.hummingdroid.CommandPacket.TelemetryConfig telemetry_config = 3;
  if (has_telemetry_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->telemetry_config(), target);
  }

  // optional .org.hummingdroid.CommandPacket.SensorsConfig sensors_config = 4;
  if (has_sensors_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sensors_config(), target);
  }

  // optional .org.hummingdroid.CommandPacket.MotorsConfig motors_config = 5;
  if (has_motors_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->motors_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .org.hummingdroid.Attitude command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .org.hummingdroid.CommandPacket.ControllerConfig controller_config = 2;
    if (has_controller_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller_config());
    }

    // optional .org.hummingdroid.CommandPacket.TelemetryConfig telemetry_config = 3;
    if (has_telemetry_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->telemetry_config());
    }

    // optional .org.hummingdroid.CommandPacket.SensorsConfig sensors_config = 4;
    if (has_sensors_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors_config());
    }

    // optional .org.hummingdroid.CommandPacket.MotorsConfig motors_config = 5;
    if (has_motors_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motors_config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPacket::MergeFrom(const CommandPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::org::hummingdroid::Attitude::MergeFrom(from.command());
    }
    if (from.has_controller_config()) {
      mutable_controller_config()->::org::hummingdroid::CommandPacket_ControllerConfig::MergeFrom(from.controller_config());
    }
    if (from.has_telemetry_config()) {
      mutable_telemetry_config()->::org::hummingdroid::CommandPacket_TelemetryConfig::MergeFrom(from.telemetry_config());
    }
    if (from.has_sensors_config()) {
      mutable_sensors_config()->::org::hummingdroid::CommandPacket_SensorsConfig::MergeFrom(from.sensors_config());
    }
    if (from.has_motors_config()) {
      mutable_motors_config()->::org::hummingdroid::CommandPacket_MotorsConfig::MergeFrom(from.motors_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPacket::CopyFrom(const CommandPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket::IsInitialized() const {

  if (has_controller_config()) {
    if (!this->controller_config().IsInitialized()) return false;
  }
  if (has_telemetry_config()) {
    if (!this->telemetry_config().IsInitialized()) return false;
  }
  if (has_sensors_config()) {
    if (!this->sensors_config().IsInitialized()) return false;
  }
  if (has_motors_config()) {
    if (!this->motors_config().IsInitialized()) return false;
  }
  return true;
}

void CommandPacket::Swap(CommandPacket* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(controller_config_, other->controller_config_);
    std::swap(telemetry_config_, other->telemetry_config_);
    std::swap(sensors_config_, other->sensors_config_);
    std::swap(motors_config_, other->motors_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPacket_descriptor_;
  metadata.reflection = CommandPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TelemetryPacket::kCommandFieldNumber;
const int TelemetryPacket::kAttitudeFieldNumber;
const int TelemetryPacket::kControlFieldNumber;
const int TelemetryPacket::kSwitchesFieldNumber;
#endif  // !_MSC_VER

TelemetryPacket::TelemetryPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TelemetryPacket::InitAsDefaultInstance() {
  command_ = const_cast< ::org::hummingdroid::Attitude*>(&::org::hummingdroid::Attitude::default_instance());
  attitude_ = const_cast< ::org::hummingdroid::Attitude*>(&::org::hummingdroid::Attitude::default_instance());
  control_ = const_cast< ::org::hummingdroid::MotorsControl*>(&::org::hummingdroid::MotorsControl::default_instance());
  switches_ = const_cast< ::org::hummingdroid::Switches*>(&::org::hummingdroid::Switches::default_instance());
}

TelemetryPacket::TelemetryPacket(const TelemetryPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TelemetryPacket::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  attitude_ = NULL;
  control_ = NULL;
  switches_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelemetryPacket::~TelemetryPacket() {
  SharedDtor();
}

void TelemetryPacket::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
    delete attitude_;
    delete control_;
    delete switches_;
  }
}

void TelemetryPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelemetryPacket_descriptor_;
}

const TelemetryPacket& TelemetryPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Communication_2eproto();
  return *default_instance_;
}

TelemetryPacket* TelemetryPacket::default_instance_ = NULL;

TelemetryPacket* TelemetryPacket::New() const {
  return new TelemetryPacket;
}

void TelemetryPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != NULL) command_->::org::hummingdroid::Attitude::Clear();
    }
    if (has_attitude()) {
      if (attitude_ != NULL) attitude_->::org::hummingdroid::Attitude::Clear();
    }
    if (has_control()) {
      if (control_ != NULL) control_->::org::hummingdroid::MotorsControl::Clear();
    }
    if (has_switches()) {
      if (switches_ != NULL) switches_->::org::hummingdroid::Switches::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TelemetryPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.hummingdroid.Attitude command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attitude;
        break;
      }

      // optional .org.hummingdroid.Attitude attitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attitude()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_control;
        break;
      }

      // optional .org.hummingdroid.MotorsControl control = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_switches;
        break;
      }

      // optional .org.hummingdroid.Switches switches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_switches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TelemetryPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .org.hummingdroid.Attitude command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(), output);
  }

  // optional .org.hummingdroid.Attitude attitude = 2;
  if (has_attitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attitude(), output);
  }

  // optional .org.hummingdroid.MotorsControl control = 3;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->control(), output);
  }

  // optional .org.hummingdroid.Switches switches = 4;
  if (has_switches()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->switches(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TelemetryPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .org.hummingdroid.Attitude command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(), target);
  }

  // optional .org.hummingdroid.Attitude attitude = 2;
  if (has_attitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attitude(), target);
  }

  // optional .org.hummingdroid.MotorsControl control = 3;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->control(), target);
  }

  // optional .org.hummingdroid.Switches switches = 4;
  if (has_switches()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->switches(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TelemetryPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .org.hummingdroid.Attitude command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .org.hummingdroid.Attitude attitude = 2;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attitude());
    }

    // optional .org.hummingdroid.MotorsControl control = 3;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

    // optional .org.hummingdroid.Switches switches = 4;
    if (has_switches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->switches());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TelemetryPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TelemetryPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TelemetryPacket::MergeFrom(const TelemetryPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::org::hummingdroid::Attitude::MergeFrom(from.command());
    }
    if (from.has_attitude()) {
      mutable_attitude()->::org::hummingdroid::Attitude::MergeFrom(from.attitude());
    }
    if (from.has_control()) {
      mutable_control()->::org::hummingdroid::MotorsControl::MergeFrom(from.control());
    }
    if (from.has_switches()) {
      mutable_switches()->::org::hummingdroid::Switches::MergeFrom(from.switches());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TelemetryPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryPacket::CopyFrom(const TelemetryPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryPacket::IsInitialized() const {

  if (has_control()) {
    if (!this->control().IsInitialized()) return false;
  }
  if (has_switches()) {
    if (!this->switches().IsInitialized()) return false;
  }
  return true;
}

void TelemetryPacket::Swap(TelemetryPacket* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(attitude_, other->attitude_);
    std::swap(control_, other->control_);
    std::swap(switches_, other->switches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TelemetryPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelemetryPacket_descriptor_;
  metadata.reflection = TelemetryPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hummingdroid
}  // namespace org

// @@protoc_insertion_point(global_scope)
